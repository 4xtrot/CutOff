// \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u043c\u0438\u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0434\u0432\u0438\u0433\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 74HC595.
// \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0442\u0435\u0440\u043c\u043e\u043c\u0435\u0442\u0440 \u043d\u0430 Attiny13 \u0438 LM35.
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h> 
#include <avr/pgmspace.h>

volatile unsigned int adc_counter, temperature, value;

// \u041f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0410\u0426\u041f
ISR(SIG_ADC)
{
	// Vref = 5V, \u0432\u044b\u0445\u043e\u0434 \u0441 \u0434\u0430\u0442\u0447\u0438\u043a\u0430 \u043e\u0442 0 \u0434\u043e 1,5V
	// max \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 4,99V
	// k = 499/1023 = 0,487 \u0438\u043b\u0438 26/53
	//value = value + ((ADC*26)/53);
	value = value + ((ADCH/**3*/)/*/1*/); //insert 4xtrot. For me U
	adc_counter++;
}

// \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438\u0439 \u0434\u043b\u044f \u0441\u0435\u043c\u0438\u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0430
//------------------0-----1-----2-----3-----4-----5                      
//char SEGMENTE[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,
//------------------6-----7-----8-----9----\u043f\u0443\u0441\u0442\u043e
//                   0x7D, 0x07, 0x7F, 0x6F, 0x00};

//4xtrot add. \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u044f\u0434\u0430\u043c\u0438 \u0446\u0438\u0444\u0440 (\u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0434\u0432\u0438\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440)
//-----------------0-----1---2------3------4------5------6-----7---8-----9-----empty                      
char SEGMENTE[] = {~63, ~6, ~91,   ~79,   ~102,  ~109,  ~125, ~7, ~127, ~111, ~0x00}; 
char DIGIT[] = {0b00000011, 0b00000100, 0b00001000};  //{0x01, 0x02, 0x04}; 
#define POINT ~128;

//end add

// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0440\u0435\u0433\u0438\u0441\u0442\u0440
void write_display(unsigned char *data, unsigned char nbytes)
{
	unsigned char mask,i;

	for(i = 0; i < nbytes; i++)
	{
		mask = 0x80;
//static unsigned char r = 0;
//r = i;
		/*insert 4xtrot*/
		for(char k = 0; k < 8; k++)
		{
			// \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0431\u0438\u0442 \u0441 \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439
			if(DIGIT[i] & mask)
			{
				PORTB |= (1 << PB0); // DATA 1
				PORTB |= (1 << PB2); // CLK 1
				PORTB &= ~(1 << PB2); // CLK 0
			}
			else
			{
				PORTB &= ~(1 << PB0); // DATA 0
				PORTB |= (1 << PB2); // CLK 1
				PORTB &= ~(1 << PB2); // CLK 0
			}
			mask = mask >> 1; // \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0431\u0438\u0442\u044b
		}
		// \u0437\u0430\u0449\u0435\u043b\u043a\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440
		//PORTB |= (1 << PB1); 
		//PORTB &= ~(1 << PB1);
		mask = 0x80;
		/*end insert*/		

		for(char k = 0; k < 8; k++)
		{
			// \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0431\u0438\u0442 \u0441 \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439
			if(data[i] & mask)
			{
				PORTB |= (1 << PB0); // DATA 1
				PORTB |= (1 << PB2); // CLK 1
				PORTB &= ~(1 << PB2); // CLK 0
			}
			else
			{
				PORTB &= ~(1 << PB0); // DATA 0
				PORTB |= (1 << PB2); // CLK 1
				PORTB &= ~(1 << PB2); // CLK 0
			}
			mask = mask >> 1; // \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0431\u0438\u0442\u044b
		}
		/*insert 4xtrot*/
		// \u0437\u0430\u0449\u0435\u043b\u043a\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440
		PORTB |= (1 << PB1); 
		PORTB &= ~(1 << PB1);
		_delay_us(500);
		/*end insert*/
	}
	//\u0433\u0430\u0441\u0438\u043c, \u0438\u043d\u0430\u0447\u0435 \u043e\u0434\u043d\u0430 \u0446\u0438\u0444\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u0433\u043e\u0440\u0435\u0442\u044c \u044f\u0440\u0447\u0435 \u0438\u0437-\u0437\u0438 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0438 \u044d\u0442\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430
		mask = 0x80;
		for(char k = 0; k < 16; k++)
		{
				PORTB &= ~(1 << PB0); // DATA 0
				PORTB |= (1 << PB2); // CLK 1
				PORTB &= ~(1 << PB2); // CLK 0
		}
		/*insert 4xtrot*/
		// \u0437\u0430\u0449\u0435\u043b\u043a\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440
		PORTB |= (1 << PB1); 
		PORTB &= ~(1 << PB1);
	//end \u0433\u0430\u0441\u0438\u043c

	// \u0437\u0430\u0449\u0435\u043b\u043a\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440
	//PORTB |= (1 << PB1); //comment 4xtrot
	//PORTB &= ~(1 << PB1); //comment 4xtrot
}

int main(void)
{
DDRB = 0b00000111;
PORTB = 0b00000000;

ADMUX |= (1 << MUX1)|(1 << MUX0);  // \u0412\u0445\u043e\u0434 ADC3
ADMUX = ADMUX&(~(1<<REFS0));// \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u043d\u0430\u043f\u0440\u044f\u0436\u0435\u043d\u0438\u044f = VCC ----
ADMUX = ADMUX|(1<<ADLAR); // \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0434\u0432\u0438\u043d\u0443\u0442 \u0432\u043f\u0440\u0430\u0432\u043e. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u043d\u043e \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 ADCH \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 ADCL \u0431\u0443\u0434\u0443\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0432 7 \u0438 8 \u0431\u0438\u0442\u0435 \u043c\u043b\u0430\u0434\u0448\u0438\u0435 \u0440\u0430\u0437\u0440\u044f\u0434\u044b \u0440\u043f\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u043c\u0438 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u043d\u0435\u0431\u0440\u0435\u0447\u044c.--------
ADCSRA |= (1 << ADEN) // \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0410\u0426\u041f
       |(1 << ADPS2)|(1 << ADPS1) // \u041f\u0440\u0435\u0434\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u043d\u0430 64
	   |(1 << ADIE); // \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f
ACSR |= (1 << ACD); // \u0412\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0430\u043d\u0430\u043b\u0430\u0433\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440
DIDR0 |= (1 << ADC3D); // \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u0432\u0445\u043e\u0434\u044b
ADCSRA = ADCSRA|(1<<ADSC);//\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f!!! -------------

sei(); // \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u044f

unsigned char display[3];

while(1)
{
ADCSRA |= (1 << ADSC); // \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435

if(adc_counter > 100) // \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0410\u0426\u041f. \u0411\u044b\u043b\u043e 300 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043d\u043e \u0443\u0431\u0440\u0430\u043b \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 \u0438 adc_counter \u0441\u0442\u0430\u043b \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f
{
	temperature = value/adc_counter;
	adc_counter = 0;
	value = 0;
	//_delay_ms(50);
}

// \u0415\u0441\u043b\u0438 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 100 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 \u0433\u0430\u0441\u0438\u043c \u043d\u0435\u0437\u043d\u0430\u0447\u0430\u0449\u0438\u0439 \u043d\u043e\u043b\u044c
if(temperature < 100)
{
	display[2] =  SEGMENTE[temperature % 10];
	display[1] =  SEGMENTE[(temperature / 10) % 10] & POINT ;
	display[0] =  SEGMENTE[10];
}
// \u0418\u043d\u0430\u0447\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0440\u0430\u0437\u0440\u044f\u0434\u044b
else
{
	display[2] =  SEGMENTE[temperature % 10];
	display[1] =  SEGMENTE[(temperature / 10) % 10] & POINT ;
	display[0] =  SEGMENTE[(temperature / 100) % 10];
}

/*debug*/
/*static char cnt = 0;
if(cnt>9) cnt = 0;
display[0] = SEGMENTE[5];
display[1] = SEGMENTE[6] & POINT ;
display[2] = SEGMENTE[7];

cnt++;*/
//_delay_ms(10);
/*end debug*/

// \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440
write_display(display,3);
}
}
